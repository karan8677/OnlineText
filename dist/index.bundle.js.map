{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"joi\"","webpack:///external \"redis\"","webpack:///external \"fs\"","webpack:///external \"mysql\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"body-parser\"","webpack:///external \"https\"","webpack:///external \"cors\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"cookie-parser\"","webpack:///external \"ws\"","webpack:///external \"dotenv\"","webpack:///external \"multer\"","webpack:///./src/config/config.js","webpack:///./src/server/routes/login.route.js","webpack:///./src/server/routes/register.route.js","webpack:///./src/server/modules/jwt.module.js","webpack:///./src/server/controllers/mainPage.controller.js","webpack:///./src/server/routes/mainPage.route.js","webpack:///./src/server/routes/verification.route.js","webpack:///./src/server/modules/mysql.module.js","webpack:///./src/server/modules/userData.module.js","webpack:///./src/server/modules/group.module.js","webpack:///./src/server/modules/invite.module.js","webpack:///./src/server/controllers/group.controller.js","webpack:///./src/server/modules/friend.module.js","webpack:///./src/server/controllers/friend.controller.js","webpack:///./src/server/controllers/invite.controller.js","webpack:///./src/server/controllers/userData.controller.js","webpack:///./src/server/modules/login.module.js","webpack:///./src/server/controllers/login.controller.js","webpack:///./src/server/modules/register.module.js","webpack:///./src/server/controllers/register.controller.js","webpack:///./src/server/modules/image.module.js","webpack:///./src/server/modules/message.module.js","webpack:///./src/server/controllers/message.controller.js","webpack:///./src/server/routes/file.route.js","webpack:///./src/server/routes/error.route.js","webpack:///./src/server/routes/index.route.js","webpack:///./src/config/express.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","envVarSchema","Joi","keys","NODE_ENV","string","default","allow","PORT","number","MYSQL_PORT","MYSQL_HOST","MYSQL_USER","MYSQL_PASS","MYSQL_NAME","VERSION","unknown","required","error","envVars","validate","process","env","Error","message","version","port","mysqlPort","mysqlHost","mysqlUserName","mysqlPass","mysqlDatabase","MYSQL_DATABASE","router","express","Router","req","res","render","token","Promise","resolve","reject","jwt","verify","err","payload","console","user_account","sign","_id","toString","expiresIn","cookie","maxAge","httpOnly","secure","cookies","jwtModule","then","jwtVerify_result","catch","redirect","mainPageCtrl","connectionPool","mysql","createPool","connection","host","user","password","database","command","getConnection","connectionError","query","result","release","userAccount","userID","groupName","UserID","num","sqlCommand","ownID","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","groupID","toUserID","fromUserID","async","jsonpackage","jwtAuthResult","getUserIDResult","userDataModule","length","getUserGroupResult","groupModule","send","JSON","stringify","params","getCertainGroupIDResult","GroupID","all","inviteModule","log","getGroupTestResult","UserID1","UserID2","getUserFriendResult","friendModule","getFriendTestResult","getFriendInviteResult","userName","getUserGroupInviteResult","getUserDataResult","userPassword","UserPassword","loginResult","loginModule","registerModule","MessageID","Number","friendID","messageID","saveGroupMessageResult","data","messagePackage","messageModule","client","redis","createClient","on","RPUSH","expire","LRANGE","getGroupMessageResult","x","getFriendMessageResult","loginCtrl","post","registerCtrl","userDataCtrl","groupCtrl","delete","inviteCtrl","friendCtrl","messageCtrl","use","login","register","mainPage","verification","file","app","bodyParser","json","urlencoded","extended","cookieParser","cors","morgan","set","upload","body","index","static","path","join","status","clients","SERVER_CONFIG","fs","readFileSync","cert","server","https","createServer","wss","SocketServer","Server","verifyClient","info","cb","headers","list","split","forEach","parts","shift","trim","decodeURI","ws","push","jsonData","parse","messageName","userDataMoudule","account","id","dateTime","fromUserAccount","getGroupMemberResult","sendPackage","some","item","saveMessage_result","getFriendResult","indexOf","splice","listen"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","module.exports = require(\"express\");","module.exports = require(\"joi\");","module.exports = require(\"redis\");","module.exports = require(\"fs\");","module.exports = require(\"mysql\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"body-parser\");","module.exports = require(\"https\");","module.exports = require(\"cors\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"ws\");","module.exports = require(\"dotenv\");","module.exports = require(\"multer\");","/* config.js */\r\nimport Joi from 'joi'\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config()\r\n\r\n// 建立每個變數 joi 驗證規則\r\nconst envVarSchema = Joi.object().keys({\r\n    NODE_ENV: Joi.string().default('development').allow(['development', 'production']), // 字串且預設值為development 並只允許兩種參數\r\n    PORT: Joi.number().default(8080), // 數字且預設值為 8080\r\n    MYSQL_PORT: Joi.number().default(3306), //數字且預設值為3306\r\n    MYSQL_HOST: Joi.string().default('127.0.0.1'), //字串取預設值為127.0.0.1\r\n    MYSQL_USER: Joi.string(), // 字串\r\n    MYSQL_PASS: Joi.string(), // 字串\r\n    MYSQL_NAME: Joi.string(), // 字串\r\n    VERSION: Joi.string() // 字串\r\n}).unknown().required()\r\n\r\n// process.env 撈取 .env 內的變數做 joi 驗證\r\nconst { error, value: envVars } = Joi.validate( process.env, envVarSchema)\r\n\r\nif (error) {\r\n    throw new Error(`Config validation error: ${error.message}`)\r\n}\r\n\r\nconst config = {\r\n    version: envVars.VERSION, // 版本\r\n    env: envVars.NODE_ENV,  // 開發模式\r\n    port: envVars.PORT,// API 阜號\r\n    mysqlPort: envVars.MYSQL_PORT, // 連接阜號(MYSQL_PORT)\r\n    mysqlHost: envVars.MYSQL_HOST, // 主機名稱 (MYSQL_HOST)\r\n    mysqlUserName: envVars.MYSQL_USER, // 用戶名稱 (MYSQL_USER)\r\n    mysqlPass: envVars.MYSQL_PASS, // 資料庫密碼(MYSQL_PASS)\r\n    mysqlDatabase: envVars.MYSQL_DATABASE  // 阜號\r\n}\r\n\r\nexport default config  // 匯出共用","import express from 'express'\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Login')\r\n})\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Register')\r\n})\r\n\r\nexport default router","import jwt from 'jsonwebtoken'\r\n\r\n\r\nconst SECRET = 'thisismynewproject'\r\nconst expires = 1000 * 10000\r\nconst jwtVerify = (token)=>{\r\n    \r\n    return new Promise((resolve, reject)=>{\r\n\r\n        jwt.verify(token, SECRET, (err, payload) =>{\r\n            \r\n            if(err){\r\n                console.error('jwtVerify error:', err)\r\n                reject(err)\r\n\r\n            }else{\r\n\r\n                resolve(payload);\r\n\r\n            }\r\n        })\r\n    })\r\n    \r\n}\r\n\r\nconst jwtSetCookie = (user_account, res)=>{\r\n\r\n    return new Promise((resolve, reject)=>{\r\n        try{\r\n            const token = jwt.sign({ _id: user_account.toString() }, SECRET, { expiresIn: '1 day' })\r\n            res.cookie('token', token, { maxAge: expires, httpOnly: true, secure: false })\r\n            resolve(\"CookieSet\");\r\n        }\r\n        catch(err){\r\n            console.error('jwtSetCookie error:', err)\r\n            reject(err)\r\n        }\r\n        \r\n        \r\n    })\r\n\r\n}\r\n\r\nexport default{\r\n    jwtVerify,\r\n    jwtSetCookie\r\n}","import jwtModule from '../modules/jwt.module'\r\n\r\nconst mainPageGet = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        res.render('mainPage')\r\n\r\n    }).catch((err) => {\r\n        res.redirect('./login');\r\n        // res.send(err)\r\n    })\r\n}\r\n\r\n\r\nexport default {\r\n    mainPageGet\r\n}","import express from 'express'\r\nimport mainPageCtrl from '../controllers/mainPage.controller'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPageGet(req, res)\r\n\r\n})\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Verification')\r\n})\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst mysqlCommand = (command) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                connection.query(command, function (err, result) {\r\n\r\n                    if(err){\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    }else{\r\n\r\n                        resolve(result)\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    mysqlCommand\r\n}","import mysql from './mysql.module'\r\n\r\nconst getUserID = (userAccount) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + userAccount + \"'\"\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n\r\n            resolve(result)\r\n            \r\n        })\r\n        .catch(err => {\r\n            console.error('getUserID error:', err)\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\nconst getUserData = (userAccount) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT UserID AS userID , UserAccount AS userName FROM Account WHERE UserAccount = '\" + userAccount + \"'\"\r\n        \r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('getUserData error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default {\r\n    getUserID,\r\n    getUserData\r\n}\r\n","import mysql from './mysql.module'\r\nconst getUserGroup = (userID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT GroupList.GroupID AS groupID, GroupList.GroupName AS groupName \" +\r\n            \"FROM Member \" +\r\n            \"INNER JOIN GroupList \" +\r\n            \"ON GroupList.GroupID = Member.GroupID \" +\r\n            \"WHERE Member.UserID = \" +\r\n            userID\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.error('getUserGroup error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nconst getGroup = (groupName, UserID, num) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"SELECT * FROM GroupList WHERE\" +\r\n            \" GroupName = '\" + groupName + \"' AND OwnID = \" + UserID +\r\n            \" ORDER BY GroupID DESC \"\r\n        if (num !== \"all\") {\r\n\r\n            sqlCommand += \"limit \" + num;\r\n\r\n        }\r\n\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getGroup error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nconst createGroup = (groupName, ownID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var today = new Date();\r\n        var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        var dateTime = date + ' ' + time;\r\n\r\n        var sqlCommand = \"INSERT INTO GroupList(GroupName, Time, MemberNum, OwnID) VALUES('\" +\r\n            groupName + \"','\" +\r\n            dateTime + \"','\" +\r\n            1 + \"','\" +\r\n            ownID + \"')\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('createGroup error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst deleteGroup = (groupID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"DELETE FROM GroupList WHERE GroupID = \" + groupID\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('deleteGroup error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n}\r\n\r\n\r\nconst getMember = (userID, groupID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"SELECT * FROM Member\"\r\n            \" WHERE UserID = \" + userID + \r\n            \" AND GroupID = \" + groupID\r\n\r\n        if(userID === \"all\"){\r\n\r\n            sqlCommand += \" WHERE GroupID = \" + groupID\r\n\r\n        }else if(groupID ===　\"all\"){\r\n\r\n            sqlCommand += \" WHERE UserID = \" + userID\r\n\r\n        }else{\r\n\r\n            sqlCommand +=\r\n                \" WHERE UserID = \" + userID +\r\n                \" AND GroupID = \" + groupID\r\n\r\n        }\r\n        \r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getMember error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nconst addMember = (groupID, UserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"INSERT INTO Member(GroupID, UserID) VALUES('\" +\r\n            groupID + \"','\" +\r\n            UserID + \"')\"\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('addMember error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nconst deleteMember = (groupID, UserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"DELETE FROM Member \"\r\n            \r\n\r\n        if (groupID === \"all\"){\r\n\r\n            sqlCommand += \"WHERE UserID = \" + UserID\r\n\r\n        } else if (UserID === \"all\"){\r\n\r\n            sqlCommand += \"WHERE GroupID = \" + groupID\r\n\r\n        }else{\r\n\r\n            sqlCommand += \r\n                \"WHERE GroupID = \" + groupID +\r\n                \" AND UserID = \" + UserID \r\n                \r\n        }\r\n        \r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('deleteMember error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\n\r\nexport default {\r\n    getUserGroup,\r\n    getGroup,\r\n    createGroup,\r\n    deleteGroup,\r\n    \r\n    getMember,\r\n    addMember,\r\n    deleteMember,\r\n    \r\n}\r\n","import mysql from './mysql.module'\r\nconst getUserFriendInvite = (UserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT Account.UserAccount AS userName ,Account.UserID AS userID \" +\r\n            \"FROM Account \" +\r\n\r\n            \"INNER JOIN FriendInvite \" +\r\n            \"ON FriendInvite.FromUserID = Account.UserID \" +\r\n\r\n            \"WHERE FriendInvite.ToUserID =\" +\r\n            UserID\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getFriendInvite error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getFriendInvite = (toUserID, fromUserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"SELECT * FROM FriendInvite \"\r\n            \r\n\r\n        if (toUserID === \"all\"){\r\n\r\n            sqlCommand += \"WHERE FromUserID = \" + fromUserID\r\n\r\n        } else if (fromUserID === \"all\"){\r\n            \r\n            sqlCommand += \"WHERE ToUserID = \" + toUserID\r\n\r\n        }else{\r\n\r\n            sqlCommand += \r\n                \"WHERE\" +\r\n                \" ToUserID = \" + toUserID +\r\n                \" AND FromUserID = \" + fromUserID \r\n\r\n        }\r\n        \r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getFriendInvite error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst deleteFriendInvite = (toUserID, fromUserID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"DELETE FROM FriendInvite \" \r\n\r\n        if (toUserID === \"all\") {\r\n\r\n            sqlCommand += \"WHERE FromUserID = \" + fromUserID \r\n\r\n        } else if (fromUserID === \"all\") {\r\n\r\n            sqlCommand += \"WHERE ToUserID = \" + toUserID\r\n\r\n        } else {\r\n\r\n            sqlCommand += \"WHERE ToUserID = \" + toUserID + \" AND FromUserID = \" + fromUserID \r\n\r\n        }\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('deleteFriendInvite error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nconst postFriendInvite = (toUserID, fromUserID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n \r\n\r\n        var sqlCommand = \"INSERT INTO FriendInvite(ToUserID, FromUserID) VALUES('\" +\r\n            toUserID + \"','\" +\r\n            fromUserID + \"') \"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n\r\n            resolve(result)\r\n\r\n        })\r\n        .catch(err => {\r\n            \r\n                console.error('postFriendInvite error:', err)\r\n                reject(err)\r\n\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\n\r\nconst getUserGroupInvite = (userID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"SELECT GroupList.GroupName AS groupName, GroupList.GroupID AS groupID \" +\r\n            \"FROM GroupList \" +\r\n\r\n            \"INNER JOIN GroupInvite \" +\r\n            \"ON GroupInvite.GroupID = GroupList.GroupID \" +\r\n\r\n            \"WHERE GroupInvite.UserID = \" +\r\n            userID\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getUserGroupInvite error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getGroupInvite = (userID, groupID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT * FROM GroupInvite \"\r\n            \r\n        if(userID === \"all\"){\r\n\r\n            sqlCommand += \"WHERE GroupID = \" + groupID \r\n            \r\n        }else if(groupID === \"all\"){\r\n\r\n            sqlCommand += \"WHERE UserID = \" + userID \r\n\r\n        }else{\r\n\r\n            sqlCommand += \r\n                \"WHERE\" +\r\n                \" UserID = \" + userID + \" AND\" +\r\n                \" GroupID = \" + groupID\r\n        }\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getGroupInvite error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst postGroupInvite = (userID, groupID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"INSERT INTO GroupInvite(UserID, GroupID) VALUES('\" +\r\n            userID + \"','\" +\r\n            groupID + \"') \"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n\r\n                resolve(result)\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                console.error('postGroupInvite error:', err)\r\n                reject(err)\r\n\r\n            })\r\n    })\r\n\r\n}\r\n\r\nconst deleteGroupInvite = (userID, groupID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"DELETE FROM GroupInvite WHERE \"\r\n        \r\n        if(userID === \"all\"){\r\n\r\n            sqlCommand += \"GroupID = \" + groupID \r\n\r\n        }else if(groupID === \"all\"){\r\n\r\n            sqlCommand += \"UserID = \" + userID\r\n\r\n        }else{\r\n            \r\n            sqlCommand += \"UserID = \" + userID + \" AND GroupID = \" + groupID \r\n\r\n        }\r\n        \r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('deleteGroupInvite error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nexport default{\r\n    getUserFriendInvite,\r\n    getFriendInvite,\r\n    deleteFriendInvite,\r\n    postFriendInvite,\r\n\r\n    getUserGroupInvite,\r\n    getGroupInvite,\r\n    deleteGroupInvite,\r\n    postGroupInvite\r\n}","import userDataModule from '../modules/userData.module'\nimport groupModule from '../modules/group.module'\nimport inviteModule from '../modules/invite.module'\nimport jwtModule from '../modules/jwt.module'\n\nconst getGroup = async (req, res) => {\n    var jsonpackage = {}\n    jsonpackage[\"messageName\"] = \"getGroup\"\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\n    try {\n        const token = req.cookies.token\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\n        if (getUserIDResult.length !== 1) {\n            throw new Error()\n        }\n        const getUserGroupResult = await groupModule.getUserGroup(getUserIDResult[0].UserID)\n        jsonpackage[\"data\"] = getUserGroupResult\n\n    } catch (err) {\n\n        jsonpackage[\"messageName\"] = \"error\"\n\n    }\n    res.send(JSON.stringify(jsonpackage))\n}\n\nconst cresteGroup =async (req, res) =>{\n    var jsonpackage = {}\n    jsonpackage[\"messageName\"] = \"createGroup\"\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\n    try{\n        const token = req.cookies.token\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\n        if (getUserIDResult.length !== 1){\n            throw new Error()\n        }\n        const createGroupResult = await groupModule.createGroup(req.params.groupName, getUserIDResult[0].UserID)\n        const getCertainGroupIDResult = await groupModule.getGroup(req.params.groupName, getUserIDResult[0].UserID, 1)\n        if (getCertainGroupIDResult.length!==1){\n            throw new Error()\n        }\n        const addMemberResult = await groupModule.addMember(getCertainGroupIDResult[0].GroupID, getUserIDResult[0].UserID)\n        jsonpackage[\"data\"] = \"success\"\n\n    }catch(err){\n        jsonpackage[\"messageName\"] = \"error\"\n    }\n    res.send(JSON.stringify(jsonpackage))\n}\n\nconst deleteGroup =async (req, res) =>{\n    var jsonpackage = {}\n    jsonpackage[\"messageName\"] = \"deleteGroup\"\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\n    try{\n        const token = req.cookies.token;\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\n        if (getUserIDResult.length !== 1) {\n            throw new Error()\n        }\n\n        const deleteGroupMemberInviteResult = await Promise.all([\n            groupModule.deleteMember(req.params.groupID, \"all\"), \n            inviteModule.deleteGroupInvite(\"all\", req.params.groupID)\n        ])\n        const deleteGroupResult = await groupModule.deleteGroup(req.params.groupID)\n        jsonpackage[\"data\"] = \"success\"\n    }catch(err){\n        jsonpackage[\"messageName\"] = \"error\"\n        console.log(err)\n    }\n    res.send(JSON.stringify(jsonpackage))\n}\n\nconst joinGroup = async (req, res) => {\n    var jsonpackage = {}\n    jsonpackage[\"messageName\"] = \"joinGroup\"\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\n    try {\n        const token = req.cookies.token\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\n        if (getUserIDResult.length !== 1) {\n            throw new Error()\n        }\n        const getGroupTestResult = await Promise.all([\n            groupModule.getMember(getUserIDResult[0].UserID, req.params.groupID),\n            inviteModule.getGroupInvite(getUserIDResult[0].UserID, req.params.groupID)\n        ])\n\n        if (getGroupTestResult[0].length !== 0) {\n            jsonpackage[\"data\"] = \"already member\"\n        } else if (getGroupTestResult[1].length !== 1) {\n            jsonpackage[\"data\"] = \"not invited\"\n        } else {\n            const addMemberResult = await groupModule.addMember(req.params.groupID, getUserIDResult[0].UserID)\n            const deleteGroupInviteResult = await inviteModule.deleteGroupInvite(getUserIDResult[0].UserID, req.params.groupID)\n            jsonpackage[\"data\"] = \"success\"\n        }\n\n    } catch (err) {\n        jsonpackage[\"messageName\"] = \"error\"\n    }\n    res.send(JSON.stringify(jsonpackage))\n\n}\n\nconst leaveGroup = async (req, res) => {\n    var jsonpackage = {}\n    jsonpackage[\"messageName\"] = \"leaveGroup\"\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\n    try {\n\n        const token = req.cookies.token\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\n        if (getUserIDResult.length !== 1) {\n            throw new Error()\n        }\n        const deleteMemberResult = await groupModule.deleteMember(req.params.groupID, getUserIDResult[0].UserID)\n        jsonpackage[\"data\"] = \"success\"\n\n    } catch (err) {\n        jsonpackage[\"messageName\"] = \"error\"\n    }\n    res.send(JSON.stringify(jsonpackage))\n}\n\nexport default {\n    getGroup,\n    cresteGroup,\n    deleteGroup,\n    joinGroup,\n    leaveGroup\n}","import mysql from './mysql.module'\r\nconst getUserFriend = (userID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT Account.UserAccount AS friendName, FriendList.FriendID AS friendID \" +\r\n            \"FROM Account \" +\r\n            \"INNER JOIN FriendList \" +\r\n            \"ON FriendList.UserID2 = Account.UserID \" +\r\n            \"WHERE FriendList.UserID1 = \" +\r\n            userID +\r\n\r\n            \" UNION SELECT Account.UserAccount AS friendName, FriendList.FriendID AS friendID \" +\r\n            \"FROM Account \" +\r\n            \"INNER JOIN FriendList \" +\r\n            \"ON FriendList.UserID1 = Account.UserID \" +\r\n            \"WHERE FriendList.UserID2 = \" +\r\n            userID\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n                resolve(result)\r\n            })\r\n            .catch(err => {\r\n                console.error('getUserFriend error:', err)\r\n                reject(err)\r\n            })\r\n\r\n    })\r\n}\r\n\r\nconst getFriend = (UserID1, UserID2) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT * FROM FriendList \" +\r\n            \"WHERE (UserID1 = \" + UserID1 + \" AND UserID2 = \" + UserID2 + \" )\" +\r\n            \" OR (UserID1 = \" + UserID2 + \" AND UserID2 = \" + UserID1 + \" )\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n\r\n                resolve(result);\r\n\r\n            })\r\n            .catch(err => {\r\n                console.error('getFriend error:', err)\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\n\r\n\r\nconst addFriend = (UserID1, UserID2) => {\r\n    return new Promise((resolve, reject) =>{\r\n\r\n        var sqlCommand = \"INSERT INTO FriendList(UserID1, UserID2) VALUES(\" +\r\n        UserID1 + \",\" +\r\n        UserID2 + \")\"\r\n\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n\r\n                resolve(result);\r\n\r\n            })\r\n            .catch(err => {\r\n                console.error('addFriend error:', err)\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\nconst deleteFriend = (UserID1, UserID2) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"DELETE FROM FriendList \"+\r\n            \"WHERE \" +\r\n            \"(UserID1 = \" + UserID1 + \" AND UserID2 = \" + UserID2 + \") OR \" +\r\n            \"(UserID1 = \" + UserID2 + \" AND UserID2 = \" + UserID1 + \")\"\r\n\r\n\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n            .then(result => {\r\n\r\n                resolve(result);\r\n\r\n            })\r\n            .catch(err => {\r\n                console.error('deleteFriend error:', err)\r\n                reject(err)\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport default{\r\n    getUserFriend,\r\n    getFriend,\r\n    addFriend,\r\n    deleteFriend\r\n}","import userDataModule from '../modules/userData.module'\r\nimport inviteModule from '../modules/invite.module'\r\nimport friendModule from '../modules/friend.module'\r\nimport jwtModule from '../modules/jwt.module'\r\nconst getFriend = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getFriend\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1) {\r\n\r\n            throw new Error()\r\n\r\n        }\r\n        const getUserFriendResult = await friendModule.getUserFriend(getUserIDResult[0].UserID)\r\n        jsonpackage[\"data\"] = getUserFriendResult\r\n    } catch (err) {\r\n\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\nconst addFriend = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"addFriend\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1) {\r\n            throw new Error()\r\n        }\r\n        const getFriendTestResult = await Promise.all([\r\n            friendModule.getFriend(getUserIDResult[0].UserID, req.params.userID),\r\n            inviteModule.getFriendInvite(getUserIDResult[0].UserID, req.params.userID)\r\n        ])\r\n\r\n        if (getFriendTestResult[0].length !== 0) {\r\n            jsonpackage[\"data\"] = \"already friend\"\r\n        } else if (getFriendTestResult[1].length !== 1) {\r\n            jsonpackage[\"data\"] = \"not invited\"\r\n        } else {\r\n            const addFriendResult = await friendModule.addFriend(getUserIDResult[0].UserID, req.params.userID)\r\n            const deleteFriendInviteResult = await inviteModule.deleteFriendInvite(getUserIDResult[0].UserID, req.params.userID)\r\n            jsonpackage[\"data\"] = \"success\"\r\n        }\r\n\r\n\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        console.log(err)\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n\r\n}\r\nconst deleteFriend = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"deleteFriend\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1) {\r\n            throw new Error()\r\n        }\r\n        const deleteFriendResult = await friendModule.deleteFriend(req.params.userID, getUserIDResult[0].UserID)\r\n        jsonpackage[\"data\"] = \"success\"\r\n\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        console.log(err)\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\n\r\nexport default {\r\n    getFriend,\r\n    addFriend,\r\n    deleteFriend\r\n}","import jwtModule from '../modules/jwt.module'\r\nimport inviteModule from '../modules/invite.module'\r\nimport friendModule from '../modules/friend.module'\r\nimport userDataModule from '../modules/userData.module'\r\nimport groupModule from '../modules/group.module'\r\n\r\n\r\nconst getFriendInvite = async (req, res) => {\r\n    \r\n    var jsonpackage ={}\r\n    jsonpackage[\"messageName\"] = \"getFriendInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n\r\n        const token = req.cookies.token;\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1){\r\n            throw new Error()\r\n        }\r\n        const getFriendInviteResult = await inviteModule.getUserFriendInvite(getUserIDResult[0].UserID)\r\n        jsonpackage[\"data\"] = getFriendInviteResult\r\n\r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n\r\n}\r\n\r\nconst rejectFriendInvite = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"rejectFriendInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n        const token = req.cookies.token;\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1){\r\n            throw new Error()\r\n        }\r\n        const deleteFriendInviteResult = await inviteModule.deleteFriendInvite(getUserIDResult[0].UserID, req.params.userID)\r\n        jsonpackage[\"data\"] = \"success\"\r\n\r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n    \r\n}\r\n\r\nconst snedFriendInvite = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"snedFriendInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await Promise.all([\r\n            userDataModule.getUserID(jwtAuthResult._id),\r\n            userDataModule.getUserID(req.params.userName)\r\n        ])\r\n\r\n        if (getUserIDResult[0].length !== 1 || getUserIDResult[1].length !== 1){\r\n            throw new Error()\r\n        }\r\n\r\n        const getFriendTestResult = await Promise.all([\r\n            inviteModule.getFriendInvite(getUserIDResult[1][0].UserID\r\n                                        , getUserIDResult[0][0].UserID),\r\n\r\n            friendModule.getFriend(getUserIDResult[1][0].UserID\r\n                                , getUserIDResult[0][0].UserID)\r\n        ])\r\n\r\n        if (getFriendTestResult[1].length !== 0){\r\n            jsonpackage[\"data\"] = \"already friend\"\r\n        } else if (getFriendTestResult[0].length !== 0) {\r\n            jsonpackage[\"data\"] = \"already invite\"\r\n        }else{\r\n            const postFriendInviteResult = await inviteModule.postFriendInvite(getUserIDResult[1][0].UserID\r\n                , getUserIDResult[0][0].UserID)\r\n            jsonpackage[\"data\"] = \"success\"\r\n        }\r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        console.log(err)\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst getGroupInvite = async (req, res) => {\r\n\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getGroupInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1) {\r\n            throw new Error()\r\n        }\r\n        const getUserGroupInviteResult = await inviteModule.getUserGroupInvite(getUserIDResult[0].UserID)\r\n        jsonpackage[\"data\"] = getUserGroupInviteResult\r\n        \r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\n\r\nconst rejectGroupInvite = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"rejectGroupInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await userDataModule.getUserID(jwtAuthResult._id)\r\n        if (getUserIDResult.length !== 1){\r\n            throw new Error()\r\n        }\r\n        const deleteGroupInviteResult = await inviteModule.deleteGroupInvite(getUserIDResult[0].UserID, req.params.groupID)\r\n        jsonpackage[\"data\"] = \"success\"\r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n    }\r\n\r\n    res.send(JSON.stringify(jsonpackage))\r\n    \r\n}\r\n\r\nconst sendGroupInvite = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"sendGroupInvite\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserIDResult = await Promise.all([\r\n            userDataModule.getUserID(jwtAuthResult._id),\r\n            userDataModule.getUserID(req.params.userName)\r\n        ])\r\n        if (getUserIDResult[0].length !== 1 || getUserIDResult[1].length !== 1) {\r\n            throw new Error()\r\n        }\r\n        const getGroupTestResult = await Promise.all([\r\n            inviteModule.getGroupInvite(getUserIDResult[1][0].UserID\r\n                , req.params.groupID),\r\n\r\n            groupModule.getMember(getUserIDResult[1][0].UserID\r\n                , req.params.groupID)\r\n        ])\r\n\r\n        if (getGroupTestResult[1].length !== 0) {\r\n            jsonpackage[\"data\"] = \"already member\"\r\n        } else if (getGroupTestResult[0].length !== 0) {\r\n            jsonpackage[\"data\"] = \"already invite\"\r\n        } else {\r\n            const postGroupInviteResult = await inviteModule.postGroupInvite(getUserIDResult[1][0].UserID, req.params.groupID)\r\n            jsonpackage[\"data\"] = \"success\"\r\n        }\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\n\r\nexport default {\r\n    getFriendInvite,\r\n    rejectFriendInvite,\r\n    snedFriendInvite,\r\n    getGroupInvite,\r\n    rejectGroupInvite,\r\n    sendGroupInvite\r\n}","import userDataModule from '../modules/userData.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst getUserData = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"userData\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n\r\n        const token = req.cookies.token\r\n        const jwtAuthResult = await jwtModule.jwtVerify(token)\r\n        const getUserDataResult = await userDataModule.getUserData(jwtAuthResult._id)\r\n        if (getUserDataResult.length !== 1) {\r\n            throw new Error()  \r\n        }\r\n        jsonpackage[\"data\"] = getUserDataResult\r\n\r\n    }catch(err){\r\n\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        \r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\n\r\nexport default {\r\n    getUserData\r\n}","import mysql from './mysql.module'\r\n\r\nconst checkAccount = (userAccount, userPassword) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"Select UserPassword From Account Where UserAccount = '\" + userAccount + \"'\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n\r\n            if (result.length == 0) {\r\n\r\n                resolve(\"account not found\")\r\n\r\n            } else if (result[0].UserPassword === userPassword) {\r\n\r\n                resolve(\"success\")\r\n\r\n            } else {\r\n\r\n                resolve(\"password incorrect\")\r\n\r\n            }\r\n\r\n        }).catch(err => {\r\n\r\n            console.error('checkAccount error:', err)\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n}\r\n\r\nexport default {\r\n    checkAccount\r\n}","import loginModule from '../modules/login.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst login = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"login\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n\r\n        const loginResult = await loginModule.checkAccount(req.params.userAccount, req.params.userPassword)\r\n        if (loginResult === \"success\") {\r\n            const setCookieResult = await jwtModule.jwtSetCookie(req.params.userAccount, res)   \r\n        }\r\n        jsonpackage[\"data\"] = loginResult\r\n\r\n    }catch(err){\r\n\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        \r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\nexport default {\r\n    login\r\n}","import mysql from './mysql.module'\r\n\r\nconst createAccount = (userAccount, userPassword) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"INSERT INTO Account(UserAccount, UserPassword) VALUES('\" +\r\n            userAccount + \"','\" +\r\n            userPassword + \"')\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            \r\n            resolve(result);\r\n\r\n        })\r\n        .catch(err => {\r\n            console.error('createAccount error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    createAccount\r\n}","import registerModule from '../modules/register.module'\r\nimport loginModule from '../modules/login.module'\r\n\r\nconst register = async (req, res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"register\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try{\r\n\r\n        const checkAccountResult = await loginModule.checkAccount(req.params.userAccount, req.params.userPassword)\r\n        if (checkAccountResult === \"account not found\") {\r\n\r\n            const createAccountResult = await registerModule.createAccount(req.params.userAccount, req.params.userPassword)\r\n            jsonpackage[\"data\"] = \"success\"\r\n            \r\n        }else{\r\n\r\n            jsonpackage[\"data\"] = \"account exist\"\r\n            \r\n        }\r\n\r\n    }catch(err){\r\n\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        \r\n    }\r\n    res.send(JSON.stringify(jsonpackage))\r\n}\r\n\r\nexport default {\r\n    register\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst uploadImage = (imgName, img) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                // connection.query(\"INSERT INTO image SET imgName = 123, img = ?;\", img, function (err, result) {\r\n\r\n                //     if (err) {\r\n\r\n                //         console.error('SQL error:', err)\r\n                //         reject(err)\r\n\r\n                //     } else {\r\n\r\n                //         resolve(result);\r\n                //     }\r\n\r\n                // })\r\n\r\n                connection.query(\"SELECT img FROM image WHERE imgName = 123\", function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    uploadImage\r\n}","import mysql from './mysql.module'\r\n\r\nconst saveGroupMessage = (groupID, fromUserID, message, time) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var sqlCommand = \"INSERT INTO GroupMessage(GroupID, FromUserID, Message, Time) VALUES('\" +\r\n            groupID + \"','\" +\r\n            fromUserID + \"','\" +\r\n            message  + \"','\" +\r\n            time+ \"')\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('saveGroupMessage error:', err)\r\n            reject(err)\r\n        })\r\n    \r\n    })\r\n}\r\n\r\nconst getGroupMessage = (groupID, MessageID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var upper = Number(MessageID) + 50;\r\n        var lower = Number(MessageID);\r\n         \r\n        var sqlCommand = \"SELECT Account.UserAccount AS fromUserName, \"+\r\n                        \"GroupMessage.Message AS message, \"+\r\n                        \"GroupMessage.Time AS time, \" +\r\n                        \"GroupMessage.GroupID AS groupID \" +\r\n            \"FROM GroupMessage \" +\r\n\r\n            \"INNER JOIN Account \" +\r\n            \"ON Account.UserID = GroupMessage.FromUserID \" +\r\n\r\n            \"WHERE GroupMessage.GroupID = \" +\r\n            groupID +\r\n            \" ORDER BY GroupMessage.MessageID limit \" + MessageID + \",\" + (MessageID+50)\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result =>{\r\n\r\n            resolve(result)\r\n\r\n        }).catch(err =>{\r\n\r\n            console.error('getGroupMessage error:', err)\r\n            reject(err)\r\n\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst saveFriendMessage = (friendID, fromUserID, message, time) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"INSERT INTO FriendMessage(FriendID, FromUserID, Message, Time) VALUES('\" +\r\n            friendID + \"','\" +\r\n            fromUserID + \"','\" +\r\n            message + \"','\" +\r\n            time + \"')\"\r\n\r\n        mysql.mysqlCommand(sqlCommand)\r\n        .then(result => {\r\n            resolve(result)\r\n        })\r\n        .catch(err => {\r\n            console.error('saveFriendMessage error:', err)\r\n            reject(err)\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getFriendMessage = (friendID, messageID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT Account.UserAccount AS fromUserName, \"+\r\n        \"FriendMessage.Message AS message, \" +\r\n            \"FriendMessage.Time AS time, \" +\r\n            \"FriendMessage.FriendID AS friendID \" +\r\n            \"FROM FriendMessage \" +\r\n            \"INNER JOIN Account  \" +\r\n            \"ON FriendMessage.FromUserID = Account.UserID \" +\r\n            \"WHERE FriendMessage.FriendID = \" +\r\n            friendID +\r\n            \" ORDER BY FriendMessage.MessageID limit \" + messageID + \",\" + (messageID + 50)\r\n\r\n        mysql.mysqlCommand(sqlCommand).then(result => {\r\n            resolve(result);\r\n\r\n        }).catch(err => {\r\n\r\n            console.error('getFriendMessage error:', err)\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nconst getFriend = (friendID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        var sqlCommand = \"SELECT * FROM FriendList \" +\r\n            \"WHERE FriendList.FriendID = \" + friendID\r\n             \r\n        mysql.mysqlCommand(sqlCommand).then(result => {\r\n            resolve(result);\r\n\r\n        }).catch(err => {\r\n\r\n            console.error('getFriendMessage error:', err)\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n}\r\n\r\nexport default {\r\n    saveGroupMessage,\r\n    getGroupMessage,\r\n    saveFriendMessage,\r\n    getFriendMessage,\r\n    \r\n    getFriend\r\n}","import messageModule from '../modules/message.module'\r\nimport groupModule from '../modules/group.module'\r\nimport redis from 'redis'\r\n\r\nconst getGroupMember = async (groupID) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getGroupMember\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const saveGroupMessageResult = await groupModule.getMember(\"all\", groupID)\r\n        jsonpackage[\"data\"] = saveGroupMessageResult\r\n        return jsonpackage\r\n\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        return err\r\n    }\r\n}\r\n\r\nconst saveGroupMessage =async (data, messagePackage) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"saveGroupMessage\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n\r\n    try{\r\n        const saveGroupMessageResult = await messageModule.saveGroupMessage(data.groupID, data.fromUserID, data.message, data.time)\r\n        const client = redis.createClient()\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected')\r\n\r\n        })\r\n        client.RPUSH(data.groupID + \"_groupMessage\", JSON.stringify(messagePackage))\r\n        client.expire(data.groupID + \"_groupMessage\", 1000)\r\n\r\n        jsonpackage[\"data\"] = \"success\"\r\n        return jsonpackage\r\n\r\n    }catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        return err\r\n    }\r\n}\r\n\r\nconst getOldGroupMessage = async (req ,res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getOldGroupMessage\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const client = redis.createClient();\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected');\r\n\r\n        });\r\n        client.LRANGE(req.params.groupID + \"_groupMessage\", 0, 50, async(err, result) => {\r\n            var redisResult = result\r\n\r\n            // if (redisResult.length != 0) {\r\n            //     for (let x = 0; x < redisResult.length; x++) {\r\n            //         redisResult[x] = JSON.parse(redisResult[x])\r\n            //     }\r\n            //     jsonpackage[\"data\"] = redisResult\r\n            //     client.expire(req.params.groupID + \"_groupMessage\", 1000)\r\n            //     res.send(JSON.stringify(jsonpackage))\r\n            // } else {\r\n                const getGroupMessageResult = await messageModule.getGroupMessage(req.params.groupID, req.params.messageID)\r\n                jsonpackage[\"data\"] = getGroupMessageResult\r\n                for (var x = 0; x < jsonpackage.data.length; x++) {\r\n                    client.RPUSH(req.params.groupID + \"_groupMessage\", JSON.stringify(jsonpackage.data[x]));\r\n                }\r\n                client.expire(req.params.groupID + \"_groupMessage\", 1000)\r\n                res.send(JSON.stringify(jsonpackage))\r\n            // }\r\n        })\r\n    } catch(err){\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        res.send(JSON.stringify(jsonpackage))\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nconst getFriend = async (friendID) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getGroupMember\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const saveGroupMessageResult = await messageModule.getFriend(friendID)\r\n        jsonpackage[\"data\"] = saveGroupMessageResult\r\n        return jsonpackage\r\n\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        return err\r\n    }\r\n}\r\n\r\nconst saveFriendMessage = async (data, messagePackage) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"saveFriendMessage\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const saveGroupMessageResult = await messageModule.saveFriendMessage(data.friendID, data.fromUserID, data.message, data.time)\r\n        const client = redis.createClient()\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected')\r\n\r\n        })\r\n        client.RPUSH(data.friendID + \"_friendMessage\", JSON.stringify(messagePackage))\r\n        client.expire(data.friendID + \"_friendMessage\", 1000)\r\n\r\n        jsonpackage[\"data\"] = \"success\"\r\n        return jsonpackage\r\n\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        return err\r\n    }\r\n}\r\n\r\nconst getOldFriendMessage = async (req ,res) => {\r\n    var jsonpackage = {}\r\n    jsonpackage[\"messageName\"] = \"getOldFriendMessage\"\r\n    jsonpackage[\"data\"] = \"Auth fail or database error\"\r\n    try {\r\n        const client = redis.createClient();\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected');\r\n\r\n        });\r\n        client.LRANGE(req.params.friendID + \"_friendMessage\", 0, 50, async (err, result) => {\r\n            var redisResult = result\r\n\r\n            // if (redisResult.length != 0) {\r\n            //     for (let x = 0; x < redisResult.length; x++) {\r\n            //         redisResult[x] = JSON.parse(redisResult[x])\r\n            //     }\r\n            //     jsonpackage[\"data\"] = redisResult\r\n            //     client.expire(req.params.friendID + \"_friendMessage\", 1000)\r\n            //     res.send(JSON.stringify(jsonpackage))\r\n            // } else {\r\n                const getFriendMessageResult = await messageModule.getFriendMessage(req.params.friendID, req.params.messageID)\r\n                jsonpackage[\"data\"] = getFriendMessageResult\r\n                for (var x = 0; x < jsonpackage.data.length; x++) {\r\n                    client.RPUSH(req.params.friendID + \"_friendMessage\", JSON.stringify(jsonpackage.data[x]));\r\n                }\r\n                client.expire(req.params.friendID + \"_friendMessage\", 1000)\r\n                res.send(JSON.stringify(jsonpackage))\r\n            // }\r\n        })\r\n    } catch (err) {\r\n        jsonpackage[\"messageName\"] = \"error\"\r\n        console.log(err)\r\n        res.send(JSON.stringify(jsonpackage))\r\n    }\r\n}\r\n\r\nexport default {\r\n    getGroupMember,\r\n    saveGroupMessage,\r\n    getOldGroupMessage,\r\n\r\n    getFriend,\r\n    saveFriendMessage,\r\n    getOldFriendMessage\r\n}","import express from 'express'\r\nimport groupCtrl from '../controllers/group.controller'\r\nimport friendCtrl from '../controllers/friend.controller'\r\nimport inviteCtrl from '../controllers/invite.controller'\r\nimport userDataCtrl from '../controllers/userData.controller'\r\nimport loginCtrl from '../controllers/login.controller'\r\nimport registerCtrl from '../controllers/register.controller'\r\nimport imgmodules from '../modules/image.module'\r\nimport messageCtrl from '../controllers/message.controller'\r\nimport fs from 'fs'\r\n\r\n\r\nconst multer = require('multer')\r\n\r\nconst router = express.Router()\r\n\r\n// ===========================================            login and reagister             =============================================\r\nrouter.get('/login/:userAccount/:userPassword', function (req, res) {\r\n    loginCtrl.login(req, res)\r\n\r\n})\r\n\r\nrouter.post('/register/:userAccount/:userPassword', function (req, res) {\r\n\r\n    registerCtrl.register(req, res)\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// ===========================================            user data              =============================================\r\nrouter.get('/userData', function (req, res) {\r\n\r\n\tuserDataCtrl.getUserData(req, res)\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// ===========================================            group               =============================================\r\nrouter.post('/createGroup/:groupName', function (req, res) {\r\n\r\n\tgroupCtrl.cresteGroup(req, res)\r\n\r\n})\r\nrouter.delete('/deleteGroup/:groupID', function (req, res) {\r\n\r\n\tgroupCtrl.deleteGroup(req, res)\r\n\r\n})\r\n\r\n\r\n\r\nrouter.get('/group', function (req, res) {\r\n\r\n\tgroupCtrl.getGroup(req, res)\r\n\r\n})\r\nrouter.post('/group/:groupID', function (req, res) {\r\n\r\n\tgroupCtrl.joinGroup(req, res)\r\n\r\n})\r\nrouter.delete('/group/:groupID', function (req, res) {\r\n\r\n\tgroupCtrl.leaveGroup(req, res)\r\n\r\n})\r\nrouter.get('/groupInvite', function (req, res) {\r\n\r\n\tinviteCtrl.getGroupInvite(req, res)\r\n\r\n})\r\n\r\n\r\n\r\nrouter.post('/groupInvite/:userName/:groupID', function (req, res) {\r\n\r\n\tinviteCtrl.sendGroupInvite(req, res)\r\n\r\n})\r\nrouter.delete('/groupInvite/:groupID', function (req, res) {\r\n\r\n\tinviteCtrl.rejectGroupInvite(req, res)\r\n\r\n})\r\n\r\n\r\n\r\n\r\n// ===========================================            friend               =============================================\r\nrouter.get('/friend', function (req, res) {\r\n\r\n\tfriendCtrl.getFriend(req, res)\r\n\r\n})\r\nrouter.post('/friend/:userID', function (req, res) {\r\n\r\n\tfriendCtrl.addFriend(req, res)\r\n\r\n})\r\nrouter.delete('/friend/:userID', function (req, res) {\r\n\r\n\tfriendCtrl.deleteFriend(req, res)\r\n\r\n})\r\nrouter.get('/friendInvite', function (req, res) {\r\n\r\n\tinviteCtrl.getFriendInvite(req, res)\r\n\r\n})\r\nrouter.post('/friendInvite/:userName', function (req, res) {\r\n\r\n\tinviteCtrl.snedFriendInvite(req, res)\r\n\r\n})\r\nrouter.delete('/friendInvite/:userID', function (req, res) {\r\n\r\n\tinviteCtrl.rejectFriendInvite(req, res)\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ===========================================            oldmessage               =============================================\r\nrouter.get('/oldGroupMessage/:groupID/:messageID', function (req, res) {\r\n\t\r\n\tmessageCtrl.getOldGroupMessage(req, res)\r\n\r\n})\r\nrouter.get('/oldFriendMessage/:friendID/:messageID', function (req, res) {\r\n\r\n\tmessageCtrl.getOldFriendMessage(req, res)\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const upload = multer({\r\n//     storage: multer.memoryStorage(),\r\n//     limits: {\r\n//         fileSize: 2 * 1024 * 1024,  // 限制 2 MB\r\n//     },\r\n//     fileFilter(req, file, callback) {  // 限制檔案格式為 image\r\n//         if (!file.mimetype.match('image/jpeg')) {\r\n//             callback(new Error().message = '檔案格式錯誤');\r\n//         } else {\r\n//             callback(null, true);\r\n//         }\r\n//     }\r\n// });\r\n\r\n// router.post('/Image', upload.single('image'), async (req, res, next) => {\r\n//     imgmodules.uploadImage(req.file.originalname, req.file.buffer).then((getChatPreloadMessage_result) => {\r\n\r\n//         console.log(\"success\")\r\n\r\n//     }).catch((err) => {\r\n\r\n//         console.log(\"err\")\r\n//     })\r\n// });\r\n\r\n// router.get('/Image', function (req, res) {\r\n//     imgmodules.uploadImage(1, 1).then((getChatPreloadMessage_result) => {\r\n//         res.send(getChatPreloadMessage_result[2].img)\r\n\r\n//     }).catch((err) => {\r\n\r\n//         console.log(err)\r\n//     })\r\n//     // res.sendFile('/OnlineText/public/images/login_background.png');\r\n// });\r\n\r\nexport default router","import express from 'express'\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('ErrorPage')\r\n})\r\n\r\nexport default router","import express from 'express'\r\nimport login from './login.route'\r\nimport register from './register.route'\r\nimport mainPage from './mainPage.route'\r\nimport verification from './verification.route'\r\nimport file from './file.route'\r\nimport error from './error.route'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.use('/login', login)\r\nrouter.use('/register', register)\r\nrouter.use('/mainPage', mainPage)\r\nrouter.use('/verification', verification)\r\nrouter.use('/file', file)\r\nrouter.use('/error', error)\r\n\r\nexport default router ","/* express.js */\r\nimport express from 'express';\r\nimport config from './config';\r\nimport index from '../server/routes/index.route';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\nimport cookieParser from 'cookie-parser'\r\n\r\nconst app = express()\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(cookieParser())\r\napp.use(cors())\r\napp.use(morgan('dev'))\r\n// app.set('views', path.join(__dirname, 'views'));\r\napp.set('views', 'C:/OnlineText/views')\r\napp.set(\"view engine\", \"jade\")\r\n/* GET home page. */\r\napp.upload = function (req, res) {\r\n    console.log(req.body)\r\n};\r\n\r\n// app.get('/', (req, res) => {\r\n//     res.render('welcome')\r\n// })\r\napp.use('/OnlineText', index)\r\n\r\napp.use(express.static(path.join('C:/OnlineText/', 'public')));\r\n\r\napp.use(function (req, res) {\r\n    res.status(404).render('404Page')\r\n})\r\n\r\nexport default app","import redis from 'redis'\r\nimport fs from 'fs'\r\nimport https from 'https'\r\nimport config from './config/config'\r\nimport app from './config/express'\r\nimport jwtModule from './server/modules/jwt.module'\r\nimport messageCtrl from './server/controllers/message.controller'\r\nimport userDataMoudule from './server/modules/userData.module'\r\nimport SocketServer from 'ws'\r\n\r\n\r\nvar clients = []\r\nconst SERVER_CONFIG = {\r\n    key: fs.readFileSync('key.pem'),\r\n    cert: fs.readFileSync('cert.pem')\r\n};\r\n\r\nconst server = https.createServer(SERVER_CONFIG, app)\r\nconst wss = new SocketServer.Server({\r\n    server: server\r\n    ,\r\n    verifyClient: function (info, cb) {\r\n        var token = info.req.headers.cookie\r\n        var list = {}\r\n\r\n        if (!token) {\r\n            cb(false, 401, 'Unauthorized')\r\n        }\r\n        else {\r\n            token.split(';').forEach(function (cookie) {\r\n                var parts = cookie.split('=');\r\n                list[parts.shift().trim()] = decodeURI(parts.join('='));\r\n            })\r\n            jwtModule.jwtVerify(list.token).then((jwtVerify_result) => {\r\n\r\n                cb(true);\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                cb(false, 401, 'Unauthorized')\r\n\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nwss.on('connection', ws => {\r\n\r\n    clients.push(ws);\r\n\r\n    ws.on('message', data => {\r\n\r\n        var jsonData = JSON.parse(data)\r\n        switch (jsonData.messageName) {\r\n\r\n\r\n            case \"userAccount\":\r\n                userDataMoudule.getUserID(jsonData.data)\r\n                .then(result => {\r\n\r\n                    ws.account = jsonData.data\r\n                    ws.id = result[0].UserID\r\n                    var messagePackage = {}\r\n                    messagePackage[\"messageName\"] = \"userID\"\r\n                    messagePackage[\"data\"] = result[0].UserID\r\n                    ws.send(JSON.stringify(messagePackage))\r\n\r\n                }).catch(err => {\r\n                    ws.send(JSON.stringify(err))\r\n                })\r\n\r\n                break\r\n\r\n            case \"groupMessage\":\r\n                var today = new Date();\r\n                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()\r\n                var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds()\r\n                var dateTime = date + ' ' + time\r\n\r\n                jsonData.data.time = dateTime\r\n                jsonData.data.fromUserID = ws.id\r\n                jsonData.data.fromUserAccount = ws.account \r\n                var messagePackage = {}\r\n                messagePackage[\"fromUserName\"] = jsonData.data.fromUserAccount\r\n                messagePackage[\"groupID\"] = jsonData.data.groupID\r\n                messagePackage[\"message\"] = jsonData.data.message\r\n                messagePackage[\"time\"] = dateTime\r\n                messageCtrl.saveGroupMessage(jsonData.data, messagePackage)\r\n                .then(saveGroupMessageResult => {\r\n\r\n                    return messageCtrl.getGroupMember(jsonData.data.groupID)\r\n\r\n                })\r\n                .then(getGroupMemberResult => {\r\n                    var sendPackage = {}\r\n                    sendPackage[\"messageName\"] = \"groupMessage\"\r\n                    sendPackage[\"data\"] = [messagePackage]\r\n                    for (var x = 0; x < clients.length; x++) {\r\n\r\n                        if (getGroupMemberResult.data.some(item => item.UserID === clients[x].id)) {\r\n\r\n                            clients[x].send(JSON.stringify(sendPackage))\r\n\r\n                        }\r\n\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n            break\r\n\r\n            case \"friendMessage\":\r\n                var today = new Date();\r\n                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()\r\n                var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds()\r\n                var dateTime = date + ' ' + time\r\n                jsonData.data.time = dateTime\r\n                jsonData.data.fromUserID = ws.id\r\n                jsonData.data.fromUserAccount = ws.account\r\n                var messagePackage = {}\r\n                messagePackage[\"fromUserName\"] = jsonData.data.fromUserAccount\r\n                messagePackage[\"friendID\"] = jsonData.data.friendID\r\n                messagePackage[\"message\"] = jsonData.data.message\r\n                messagePackage[\"time\"] = dateTime\r\n\r\n                messageCtrl.saveFriendMessage(jsonData.data, messagePackage)\r\n                .then(saveMessage_result => {\r\n\r\n                    return messageCtrl.getFriend(jsonData.data.friendID, jsonData.data.fromUserID)\r\n\r\n                })\r\n                .then(getFriendResult => {\r\n                    var sendPackage={}\r\n                    sendPackage[\"messageName\"] = \"friendMessage\"\r\n                    sendPackage[\"data\"] = [messagePackage]\r\n                    for (var x = 0; x < clients.length; x++) {\r\n\r\n                        if (getFriendResult.data.some(item => getFriendResult.data[0].UserID1 === clients[x].id)  || \r\n                            getFriendResult.data.some(item => getFriendResult.data[0].UserID2 === clients[x].id)) {\r\n\r\n                            clients[x].send(JSON.stringify(sendPackage))\r\n\r\n                        }\r\n\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n                break\r\n\r\n            default:\r\n                break\r\n\r\n        }\r\n\r\n    })\r\n\r\n    ws.on('close', () => {\r\n\r\n        console.log('Close connected')\r\n\r\n        const index = clients.indexOf(ws);\r\n        if (index > -1) {\r\n            clients.splice(index, 1);\r\n        }\r\n\r\n    })\r\n\r\n})\r\n\r\nserver.listen(config.port, () => {\r\n    console.log(`server started on port https://127.0.\r\n    0.1:${config.port} (${config.env})`)\r\n})\r\n\r\nexport default\r\n    { app, wss };"],"sourceRoot":""}